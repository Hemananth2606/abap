*&---------------------------------------------------------------------*
*& Report  ZOOP2
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT zoop2.
*
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
PARAMETERS b_doc TYPE vbrk-vbeln.
SELECTION-SCREEN END OF BLOCK b1.

CLASS cl_vbrk DEFINITION.

  PUBLIC SECTION.
    TYPES : BEGIN OF ts_vbrk,
            vbeln TYPE vbeln_vf,
            fkart TYPE fkart,
            fktyp TYPE fktyp,
            vsbed TYPE vsbed,
            belnr TYPE belnr_d,
            gjahr TYPE gjahr,
            END OF ts_vbrk.

    TYPES : BEGIN OF ts_vbrp,

            vbeln TYPE vbeln_vf,
            posnr TYPE posnr_vf,
            meins TYPE meins,
            aubel TYPE aubel,
            charg TYPE charg_d,
            netwr TYPE netwr_fp,
            END OF ts_vbrp.
    TYPES : BEGIN OF ts_final,
             vbeln TYPE vbeln_vf,
             fkart TYPE fkart,
             fktyp TYPE fktyp,
             vsbed TYPE vsbed,
             belnr TYPE belnr_d,
             gjahr TYPE gjahr,
             posnr TYPE posnr_vf,
             meins TYPE meins,
             aubel TYPE aubel,
             charg TYPE charg_d,
             netwr TYPE netwr_fp,
           END OF ts_final.


    DATA : lt_vbrk TYPE TABLE OF ts_vbrk,
           ls_vbrk TYPE ts_vbrk,
           lt_vbrp TYPE TABLE OF ts_vbrp,
           ls_vbrp TYPE ts_vbrp,
           lt_final TYPE TABLE OF ts_final,
           ls_final TYPE ts_final,
           tool TYPE REF TO cl_salv_functions_list,  "alv default buttons enables.
           column TYPE REF TO cl_salv_columns,  "to enable column width optimize.
           columns TYPE REF TO cl_salv_column_table, "to change the column header(name).
           zebra TYPE REF TO cl_salv_display_settings,  " to enable zebra pattern.
           lo_grid TYPE REF TO cl_salv_form_layout_grid, "to set header text in top of list(title).
           lo_layout TYPE REF TO cl_salv_form_layout_logo, "to set header text in top of list(title).
           lo_content TYPE REF TO cl_salv_form_element, "to set header text in top of list(title).
           lv_title TYPE string,
           lv_row TYPE string,
           table_desc TYPE REF TO cl_abap_tabledescr, "to set header text in top of list(title).
           desc TYPE REF TO cl_abap_structdescr, "to set header text in top of list(title).
           ls_table TYPE abap_compdescr, "to set header text in top of list(title).
           lo_total TYPE REF TO cl_salv_aggregations," to display total.
           lo_stotal TYPE REF TO cl_salv_sorts, " to display sub total.
           lo_st_table TYPE REF TO cl_salv_sort. " to display sub total.



    METHODS : fetchdata,
              displaydata.

ENDCLASS.

CLASS cl_vbrk IMPLEMENTATION.

  METHOD fetchdata.

    SELECT vbeln
           fkart
           fktyp
           vsbed
           belnr
           gjahr
      FROM vbrk
      INTO  TABLE lt_vbrk
      WHERE vbeln = b_doc.

    IF sy-subrc IS INITIAL.

      SELECT vbeln
             posnr
             meins
             aubel
             charg
             netwr
        FROM vbrp
        INTO TABLE lt_vbrp
        FOR ALL ENTRIES IN lt_vbrk
        WHERE vbeln = lt_vbrk-vbeln.

    ENDIF.

    LOOP AT lt_vbrp INTO ls_vbrp.
      ls_final-vbeln = ls_vbrp-vbeln.
      ls_final-posnr = ls_vbrp-posnr.
      ls_final-meins = ls_vbrp-meins.
      ls_final-aubel = ls_vbrp-aubel.
      ls_final-charg = ls_vbrp-charg.
      ls_final-netwr = ls_vbrp-netwr.

      READ TABLE lt_vbrk INTO ls_vbrk WITH KEY vbeln = ls_vbrp-vbeln BINARY SEARCH.

      ls_final-fkart = ls_vbrk-fkart.
      ls_final-fktyp = ls_vbrk-fktyp.
      ls_final-vsbed = ls_vbrk-vsbed.
      ls_final-belnr = ls_vbrk-belnr.
      ls_final-gjahr = ls_vbrk-gjahr.

      APPEND ls_final TO lt_final.
      CLEAR : ls_final,ls_vbrk,ls_vbrp.

    ENDLOOP.

  ENDMETHOD.

  METHOD displaydata.

*    DATA : lo_alv TYPE REF TO cl_salv_table.

    TRY.

        cl_salv_table=>factory(
*      EXPORTING
*        list_display   = IF_SALV_C_BOOL_SAP=>FALSE    " ALV Displayed in List Mode
*        r_container    =     " Abstract Container for GUI Controls
*        container_name =
          IMPORTING
            r_salv_table   =  DATA(lo_alv)  "lo_alv " Basis Class Simple ALV Tables
          CHANGING
            t_table        = lt_final
        ).
      CATCH cx_salv_msg INTO DATA(lv_msg).

    ENDTRY.

    tool = lo_alv->get_functions( ). "alv default buttons enables.

    tool->set_all( abap_true ). "alv default buttons enables.

    column = lo_alv->get_columns( ). "to enable column width optimize.

    column->set_optimize( 'X' ).  "to enable column width optimize.

    zebra = lo_alv->get_display_settings( ). " to enable zebra pattern.

    zebra->set_striped_pattern( cl_salv_display_settings=>true ). " to enable zebra pattern.

    CLEAR: lv_row,lv_title.

    DESCRIBE TABLE lt_final LINES lv_row.

    CONCATENATE text-002 lv_row INTO lv_title SEPARATED BY ' '.

    CREATE OBJECT lo_grid. "to set header text in top of list(title).

    CREATE OBJECT lo_layout."to set header text in top of list(title).

    lo_layout->set_right_logo( 'ENJOYSAP_LOGO' ).


    lo_grid->create_label(
      EXPORTING
        row         =   1
        column      =   1
        text        =  lv_title
        tooltip     =  lv_title ).

    lo_grid->create_label(
      EXPORTING
        row         =  2   " Natural Number
        column      =  1  " Natural Number
*        rowspan     =
*        colspan     =
        text        = 'Date :'
        tooltip     = 'Date :'
*        r_label_for =     " Text
*      RECEIVING
*        r_value     =     " Label
    ).

    lo_grid->create_text(
      EXPORTING
        row     =    2 " Natural Number
        column  =    2 " Natural Number
*    rowspan =
*    colspan =
        text    = sy-datum
        tooltip = sy-datum
*  RECEIVING
*    r_value =     " Text
    ).

    lo_layout->set_left_content( lo_grid ).

    lo_content = lo_layout.

    lo_alv->set_top_of_list( lo_content ).

    table_desc ?= cl_abap_typedescr=>describe_by_data( lt_final ).

    desc ?= table_desc->get_table_line_type( ).

    DATA: large TYPE scrtext_l,
          medium TYPE scrtext_m,
          short TYPE scrtext_s.

    LOOP AT desc->components INTO ls_table FROM 1.

      IF ls_table-name = text-006.

        CLEAR : large,medium,short.

        large = text-003.
        medium = text-004.
        short = text-005.

        TRY .

            columns ?= column->get_column( ls_table-name ).
            columns->set_long_text( large ).
            columns->set_medium_text( medium ).
            columns->set_short_text( short ).

          CATCH cx_salv_not_found.



        ENDTRY.

      ELSEIF ls_table-name = text-008.

        CLEAR : large,medium,short.

        large = text-009.
        medium = text-010.
        short = text-011.

        TRY .

            columns ?= column->get_column( ls_table-name ).
            columns->set_long_text( large ).
            columns->set_medium_text( medium ).
            columns->set_short_text( short ).

          CATCH cx_salv_not_found.



        ENDTRY.
      ENDIF.
    ENDLOOP.

    lo_total = lo_alv->get_aggregations( ).

    TRY .

        CALL METHOD lo_total->add_aggregation
          EXPORTING
            columnname  = 'NETWR'   " ALV Control: Field Name of Internal Table Field
            aggregation = if_salv_c_aggregation=>total    " Aggregation
*  RECEIVING
*           value       =     " ALV: Aggregations
          .
      CATCH cx_salv_data_error.    "
      CATCH cx_salv_not_found.    "
      CATCH cx_salv_existing.    "


    ENDTRY.

    CALL METHOD lo_alv->get_sorts
      RECEIVING
        value = lo_stotal.    " ALV Sort

    TRY .

        CALL METHOD lo_stotal->add_sort
          EXPORTING
            columnname = 'VBELN'   " ALV Control: Field Name of Internal Table Field
*           position   =
*           sequence   =     " Sort Sequence
*           subtotal   = IF_SALV_C_BOOL_SAP=>FALSE    " Boolean Variable (X=True, Space=False)
*           group      =     " Control Break
*           obligatory = IF_SALV_C_BOOL_SAP=>FALSE    " Boolean Variable (X=True, Space=False)
          RECEIVING
            value      = lo_st_table.    " ALV Sort Settings

        CALL METHOD lo_st_table->set_subtotal
          EXPORTING
            value = if_salv_c_bool_sap=>true.    " Boolean Variable (X=True, Space=False)

      CATCH cx_salv_not_found.    "
      CATCH cx_salv_existing.    "
      CATCH cx_salv_data_error.    "


    ENDTRY.

set PF-STATUS 'ZSTANDARD'.

lo_alv->set_screen_status(
  EXPORTING
    report        =  sy-repid   " ABAP Program: Current Main Program
    pfstatus      =  'ZSTANDARD'   " Screens, Current GUI Status
    set_functions =  lo_alv->c_functions_all   " ALV: Data Element for Constants
).

    lo_alv->display( ).

  ENDMETHOD.

ENDCLASS.

START-OF-SELECTION.

  DATA : obj TYPE REF TO cl_vbrk.

  CREATE OBJECT obj.

  obj->fetchdata( ).
  obj->displaydata( ).
